package service

import (
	"context"
	"{{.Project}}/api/body"
	"{{.Project}}/internal/model"
	"{{.Project}}/internal/{{.File}}/api/{{.ApiVersion}}"
	"github.com/jinzhu/copier"
)

type I{{.Struct}}Repo interface {
	Find(ctx context.Context, req *{{.ApiVersion}}.{{.Struct}}ListRequest) ([]*model.{{.Model}}, int64, error)
	FindOne(ctx context.Context, req *{{.ApiVersion}}.{{.Struct}}Request) (*model.{{.Model}}, error)
	Create(ctx context.Context, data *model.{{.Model}}) error
	Update(ctx context.Context, req *{{.ApiVersion}}.{{.Struct}}UpdateRequest) error
	Delete(ctx context.Context, req *{{.ApiVersion}}.{{.Struct}}DeleteRequest) error
}

type {{.Struct}}Service struct {
	repo I{{.Struct}}Repo
}

func New{{.Struct}}Service(repo I{{.Struct}}Repo) *{{.Struct}}Service {
	return &{{.Struct}}Service{repo: repo}
}

func (svc *{{.Struct}}Service) List(ctx context.Context, req *{{.ApiVersion}}.{{.Struct}}ListRequest) (*body.PageData[*model.{{.Model}}], error) {
	list, total, err := svc.repo.Find(ctx, req)
	if err != nil {
		return nil, err
	}
	return &body.PageData[*model.{{.Model}}]{
		Total: total,
		List:  list,
	}, nil
}

func (svc *{{.Struct}}Service) GetDetails(ctx context.Context, req *{{.ApiVersion}}.{{.Struct}}Request) (*{{.ApiVersion}}.{{.Struct}}Response, error) {
	one, err := svc.repo.FindOne(ctx, req)
	if err != nil {
		return nil, err
	}
	return &{{.ApiVersion}}.{{.Struct}}Response{
	    {{.Model}}: one,
	}, nil
}

func (svc *{{.Struct}}Service) Add(ctx context.Context, req *{{.ApiVersion}}.{{.Struct}}CreateRequest) error {
	var data model.{{.Model}}
	copier.Copy(&data, req)
	return svc.repo.Create(ctx, &data)
}

func (svc *{{.Struct}}Service) Update(ctx context.Context, req *{{.ApiVersion}}.{{.Struct}}UpdateRequest) error {
	return svc.repo.Update(ctx, req)
}

func (svc *{{.Struct}}Service) Delete(ctx context.Context, req *{{.ApiVersion}}.{{.Struct}}DeleteRequest) error {
	return svc.repo.Delete(ctx, req)
}