package repo

import (
	"context"
	"{{.Project}}/internal/model"
	"{{.Project}}/internal/query"
	"{{.Project}}/internal/{{.File}}/api/{{.ApiVersion}}"
	"gorm.io/gorm"
)

type {{.Struct}}Repo struct {
	db *gorm.DB
	q  *query.Query
}

func New{{.Struct}}Repo(db *gorm.DB) *{{.Struct}}Repo {
	return &{{.Struct}}Repo{db: db, q: query.Use(db)}
}

func (repo *{{.Struct}}Repo) Find(ctx context.Context, req *{{.ApiVersion}}.{{.Struct}}ListRequest) (result []*model.{{.Model}}, count int64, err error) {
	q := repo.q.{{.Model}}
	return q.WithContext(ctx).FindByPage(req.ToOffset(), req.ToLimit())
}

func (repo *{{.Struct}}Repo) FindOne(ctx context.Context, req *{{.ApiVersion}}.{{.Struct}}Request) (*model.{{.Model}}, error) {
	q := repo.q.{{.Model}}
	return q.WithContext(ctx).Where(q.ID.Eq(req.ID)).First()
}

func (repo *{{.Struct}}Repo) Create(ctx context.Context, data *model.{{.Model}}) error {
	return repo.q.{{.Model}}.WithContext(ctx).Create(data)
}

func (repo *{{.Struct}}Repo) Update(ctx context.Context, req *{{.ApiVersion}}.{{.Struct}}UpdateRequest) error {
	q := repo.q.{{.Model}}
	_, err := q.WithContext(ctx).Where(q.ID.Eq(req.ID)).Updates(req)
	return err
}

func (repo *{{.Struct}}Repo) Delete(ctx context.Context, req *{{.ApiVersion}}.{{.Struct}}DeleteRequest) error {
	q := repo.q.{{.Model}}
	_, err := q.WithContext(ctx).Where(q.ID.Eq(req.ID)).Delete()
	return err
}